#!/usr/bin/env python

import sys, re, os, textwrap, subprocess, shlex
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-v", "--verbose", dest="verbose", action="count", default=0, help="enable verbose output (default off)")
(options, args) = parser.parse_args()

if len(args) < 2:
  sys.exit(1)

if options.verbose == 0:
  debug = open("/dev/null", 'w')
else:
  debug = os.fdopen(sys.stderr.fileno(), 'w', 0)

serverfrom = args[0].strip()
serverto = args[1].strip()

# 18 Apr 2011 : GWA : Get remotes.

command = "git remote -v"
print >>debug, command
remotes = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
remotes = remotes.communicate()[0].splitlines()
serverpattern = re.compile("gitosis@([^:]+):(\S+)")

# 18 Apr 2011 : GWA : Split into first and second remote.

firstremote = remotes[0].split()
secondremote = remotes[1].split()

# 18 Apr 2011 : GWA : Get type, server and URL for each remote.

firstname = firstremote[0].strip()
servermatch = serverpattern.search(firstremote[1])
if servermatch == None:
  sys.exit(1)
firstserver = servermatch.group(1).strip()
if firstserver != serverfrom:
  sys.exit(1)
firsturl = servermatch.group(2).strip()
firsttype = firstremote[2].strip()

secondname = secondremote[0].strip()
servermatch = serverpattern.search(secondremote[1])
if servermatch == None:
  sys.exit(1)
secondserver = servermatch.group(1).strip()
if secondserver != serverfrom:
  sys.exit(1)
secondurl = servermatch.group(2).strip()
secondtype = secondremote[2].strip()

if firstserver != secondserver:
  sys.exit(1)
if firstname != secondname:
  sys.exit(1)
if firsturl != secondurl:
  sys.exit(1)

command = "git remote rm %s" % (firstname)
print >>debug, command
subprocess.call(command, shell=True)

command = "git remote add %s gitosis@%s:%s" % (firstname, serverto, firsturl)
print >>debug, command
subprocess.call(command, shell=True)

command = "git config branch.master.merge refs/heads/master"
print >>debug, command
subprocess.call(command, shell=True)

command = "git config branch.master.remote %s" % (firstname)
print >>debug, command
subprocess.call(command, shell=True)

sys.exit(0)
